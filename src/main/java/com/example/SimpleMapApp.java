package com.example;
import java.awt.*;

import com.example.ConfigManager.ConfigManager;
import com.example.db.DatabaseManager;
import org.json.JSONObject;
import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MapMarkerDot;
import java.util.ArrayList;
import java.util.List;
import net.miginfocom.swing.MigLayout;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
// todo: –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç—ã
public class SimpleMapApp {

    public static void main(String[] args) {
        LogPanel log = new LogPanel();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã

        ConfigManager config = new ConfigManager("config.ini");
        config.loadOrCreateDefault();

        // –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        String myid = config.get("myid");
        System.out.println("MyID: " + myid);
        String connectionString = config.get("connectionString");
        System.out.println("MyID: " + myid);

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
//        config.set("myid", "5678");
//        config.save();
//        System.out.println("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ myid —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.");


//  –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        // todo: –¥–æ–±–∞–≤–∏—Ç—å MeggageBox –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞ –≤ –±–∞–∑—É
        DatabaseManager databaseManager = new DatabaseManager("localhost", 3306, "eradb", "erauser","erapassword");


        try {
            databaseManager.connect();
            List<String[]>  result = databaseManager.executeQuery("SELECT * FROM msd");
            log.log("INFO","–í—ã–±—Ä–∞–Ω–æ " + result.size() + " –∑–Ω–∞—á–µ–Ω–∏–π");
            log.log("INFO","–í—ã–±—Ä–∞–Ω–æ " + result.get(0)[0] + " –∑–Ω–∞—á–µ–Ω–∏–µ");

//            while (rs.next()) {
//                System.out.println("Id: " + rs.getString("l_id") + " Json: " + rs.getString("imei"));
//            }
            log.log("INFO","–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");


        } catch (SQLException e) {
            log.log("ERROR", e.getMessage());
            e.printStackTrace();
        }



        // –ß–∏—Ç–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ test.json
        String jsonString = readFileAsString("test.json");
        if (jsonString == null) {
            System.err.println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON");
            return;
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ JSON
        JSONObject json = new JSONObject(jsonString);
        double latitude = json.getDouble("latitude");
        double longitude = json.getDouble("longitude");








        StatusPanel statusPanel = new StatusPanel();
        statusPanel.setBorderName("–°—Ç–∞—Ç—É—Å");
        statusPanel.setPreferredSize(new Dimension(290,80));

        BigPanel bigPanel = new BigPanel();

        MarkaPanel markaPanel = new MarkaPanel();
        MndPanel mndPanel = new MndPanel();
//        markaPanel.setBorderName("–ú–∞—Ä–∫–∞");
//        markaPanel.setPreferredSize(new Dimension(290,80));

        LabelPanel labelPanel = new LabelPanel();
        labelPanel.setPreferredSize(new Dimension(200,30));

        ButtonsPanel buttonsPanel = new ButtonsPanel();

//        JLabel callLabel = new JLabel("–ö–∞—Ä—Ç–æ—á–∫–∞ –≤—ã–∑–æ–≤–∞");
//        labelPanel.add(callLabel);

        WestPanel westPanel = new WestPanel();

//        westPanel.add(statusPanel);
//        westPanel.add(markaPanel);
//        westPanel.add(buttonsPanel);

//        MapViewer mapViewer = new MapViewer();
//        mapViewer.setMarker(latitude, longitude);
//        mapViewer.setDisplayCenter(latitude, longitude);

        MapPanel mapPanel = new MapPanel();
        mapPanel.map.setPosition(latitude, longitude);

        DatabaseListPanel databaseListPanel = new DatabaseListPanel(databaseManager);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è –≤—ã–±–æ—Ä–∞ ActionListener –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ DatabasePanel
        databaseListPanel.setDatabaseListListener(selectedItem -> {
            System.out.println("üîî –í—ã –≤—ã–±—Ä–∞–ª–∏: " + selectedItem);
            log.log("INFO","–í—ã–±—Ä–∞–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ " + selectedItem);


            Integer element_num = databaseListPanel.getCurrentSelectedIndex();
            log.log("INFO", "–í—ã–±—Ä–∞–Ω " + element_num + " —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞");
            MsdObject m = databaseListPanel.msdObject.get(element_num);

            double lat = HexToPos.HexToLat(m.pos_lat);
            double lon = HexToPos.HexToLon(m.pos_long);
            log.log("INFO", "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:" + lat + " " + lon);
// todo: —ç—Ç—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ mapPanel.CenterMarker
            mapPanel.map.setPosition(lat, lon);


            // todo: –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            // –ü–æ–¥–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –±–ª–∏–∂–∞–π—à–∏—Ö –∫ —Ç–æ—á–∫–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
            // –º–æ–∂–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ –∏—Ö –ø—Ä–æ–≥—Ä—É–∂–∞–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            // –º–æ–∂–Ω–æ –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î https://osmnames.org/download/
            // –ú–æ–∂–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –æ–Ω–ª–∞–π–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
            // –ú–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å

            //            try {
//                String city = ReverseGeocoder.getNearestCity(lat, lon);
//                log.log("INFO", city);
//                System.out.println("–ë–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥: " + city);
//            } catch (Exception e) {
//                e.printStackTrace();
//            }



            bigPanel.panelItems.get(0).textField.setText(String.valueOf("–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù 00"));
            bigPanel.panelItems.get(9).textField.setText(String.valueOf(m.tm));
//
//            bigPanel.fields.get(0).value = String.valueOf(m.pos_lat);
//            bigPanel.UpdateFields();



            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π

//            String s = TextParser.convertToJSON();
//            mapViewer.setDisplayCenter(databaseListPanel.getLongitude());

        });


        westPanel.add(databaseListPanel);
        westPanel.add(buttonsPanel);




        // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        JFrame frame = new JFrame("–≠—Ä–∞-–ì–ª–æ–Ω–∞—Å—Å");
        // –ø–æ–º–µ—â–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ frame
        ImageIcon icon = new ImageIcon("./resource/icon.png");
        frame.setIconImage(icon.getImage());




        JPanel centerPanel = new JPanel(new MigLayout());

        JPanel myLeftPanel = new JPanel(new MigLayout());
        myLeftPanel.setBackground(Color.YELLOW);
        myLeftPanel.setMaximumSize(new Dimension(500,900));
//        JPanel myRightPanel = new JPanel(new MigLayout());
        JPanel myRightPanel = new JPanel(new MigLayout("fill", "", ""));

        myRightPanel.setBackground(Color.PINK);
        Dimension d = new Dimension(800,500);
        myRightPanel.setPreferredSize(d);

        //myRightPanel.setMaximumSize(new Dimension(500,700));

        JButton testButton = new JButton("TEST BUTTON");
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ActionListener –Ω–∞ –∫–Ω–æ–ø–∫—É TEST BUTTON
        testButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!");

                Integer element_num = databaseListPanel.getCurrentSelectedIndex();
                log.log("INFO", "–ö–Ω–æ–ø–∫–∞ TEST BUTTON –Ω–∞–∂–∞—Ç–∞");
                log.log("INFO", "–í—ã–±—Ä–∞–Ω " + element_num + " —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞");
//                log.log("INFO", "–í—ã–±—Ä–∞–Ω—ã " + databaseListPanel.getCurrentSelectedValues()[databaseListPanel.getCurrentSelectedIndex()] + " —Å—Ç—Ä–æ–∫–∏");


                MsdObject m = databaseListPanel.msdObject.get(element_num);
                log.log("INFO", "–í—ã–±—Ä–∞–Ω–∞ —à–∏—Ä–æ—Ç–∞ " + m.pos_lat + " –∏ –¥–æ–ª–≥–æ—Ç–∞ " + m.pos_long);

//                bigPanel.fields.get(0).value = String.valueOf(m.pos_lat);
//                bigPanel.UpdateFields();

                bigPanel.panelItems.get(0).textField.setText(String.valueOf(m.pos_lat));

//                bigPanel.invalidate();
//                bigPanel.repaint();


            }
        });



        myLeftPanel.add(testButton, "wrap");

//        myLeftPanel.add(markaPanel, "wrap");
//        myLeftPanel.add(statusPanel, "wrap");
        myLeftPanel.add(bigPanel, "wrap");
        myLeftPanel.add(mndPanel);

        myRightPanel.add(mapPanel, "grow, push");

        centerPanel.add(BorderLayout.WEST, myLeftPanel);
        centerPanel.add(BorderLayout.EAST, myRightPanel);

//        centerPanel.add(BorderLayout.WEST,markaPanel);
//        centerPanel.add(BorderLayout.WEST, statusPanel);

//        centerPanel.add(BorderLayout.CENTER,mapViewer);



        SouthPanel southPanel = new SouthPanel();
        southPanel.add(log);
        log.log("INFO","–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞");


        Timer timer = new Timer(1000, new ActionListener() {

            int seconds = 0;

            @Override
            public void actionPerformed(ActionEvent e) {
                seconds++;
                labelPanel.setText("–í—Ä–µ–º—è: " + seconds + " —Å–µ–∫");
//                log.log("–ò–∑ —Ç–∞–π–º–µ—Ä–∞ " + seconds);
            }
        });

        timer.start();



        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1200, 800);
        frame.getContentPane().add(BorderLayout.NORTH, labelPanel);
        frame.getContentPane().add(BorderLayout.WEST, westPanel);
        frame.getContentPane().add(BorderLayout.CENTER, centerPanel);
        frame.getContentPane().add(BorderLayout.SOUTH, southPanel);
        frame.setVisible(true);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É
    private static String readFileAsString(String filePath) {
        try {
            return new String(Files.readAllBytes(Paths.get(filePath)), "UTF-8");
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
